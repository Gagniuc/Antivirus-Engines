import os
import tkinter as t
from tkinter import filedialog as f, scrolledtext as s, ttk as k, messagebox as m
import time

class N:
    def __init__(a):
        a.c = {}
        a.o = []
        a.f = None

def b(p):
    r = N()
    for q in p:
        n = r
        for x in q:
            if x not in n.c:
                n.c[x] = N()
            n = n.c[x]
        n.o.append(q)
    return r

def a(y, r):
    z = []
    n = r
    for i, x in enumerate(y):
        while x not in n.c and n != r:
            n = n.f
        if x in n.c:
            n = n.c[x]
        for q in n.o:
            z.append((i - len(q) + 1, q))
    return z

def d(r):
    q = []
    for n in r.c.values():
        n.f = r
        q.append(n)
    while q:
        g = q.pop(0)
        for x, s in g.c.items():
            q.append(s)
            f_ = g.f
            while x not in f_.c and f_ != r:
                f_ = f_.f
            s.f = f_.c.get(x, r)

def e(sf):
    with open(sf, 'r') as u:
        p = [v.strip().split('=')[1] for v in u if '=' in v]
    r = b(p)
    d(r)
    return r, len(p)

def h(fp, r, w=1024):
    try:
        with open(fp, 'rb') as u:
            v = u.read(w)
            u.seek(-w, os.SEEK_END)
            v += u.read(w)
            y = v.hex()
            z = a(y, r)
            if z:
                f_, g_ = z[0]
                pos = f_ / (2 * len(v))
                return True, f"\nFile: {fp}\nMalicious! ^\nSignature: {g_}\nLocation:", pos
            return False, f"\nFile: {fp}\nClean file!\nLocation:", None
    except Exception as s:
        return False, f"\nFile: {fp}\nStatus: Error - {s}\n", None

def j(pos, w=40):
    if pos is None:
        return "-" * w
    q = int(w * pos)
    return "-" * q + "+" + "-" * (w - q - 1)

def l():
    A = None
    B = 0

    C = t.Tk()
    C.title('Hex Signature Scanner (Gagniuc - Scut Antivirus)')

    def L():
        nonlocal A, B
        sf = f.askopenfilename(
            title="Select Signature File",
            filetypes=(("Text files", "*.db"), ("All files", "*.*"))
        )
        if sf:
            A, B = e(sf)
            M.config(state=t.NORMAL)
            D.config(text=f"Total Sig: {B}")

    def Q():
        nonlocal A
        if not A:
            m.showinfo("Information", "Load signature file")
            return

        x = {y.strip() for y in G.get().split(',')}
        if not x:
            m.showinfo("Information", "Extensions to scan")
            return

        y = f.askdirectory()
        if y:
            I.delete(1.0, t.END)
            F = []
            for R, _, S in os.walk(y):
                F.extend(
                    os.path.join(R, u)
                    for u in S
                    if any(u.endswith(z) for z in x)
                )
            H['maximum'] = len(F)
            ic = 0
            cc = 0
            start = time.time()
            for fp in F:
                inf, res, pos = h(fp, A)
                gp = j(pos)
                I.insert(t.END, f"{res} [{gp}]\n")
                I.update_idletasks()
                H['value'] += 1
                H.update_idletasks()
                if inf:
                    ic += 1
                else:
                    cc += 1
            end = time.time()
            elapsed = end - start
            J.config(
                text=f"Scan Summary: {ic} Infected, {cc} Clean. Time Elapsed: {elapsed:.2f} sec"
            )

    K = t.Button(C, text="Load Signature", command=L)
    K.pack(pady=10)

    D = t.Label(C, text="Total Signatures: 0")
    D.pack(pady=10)

    G = t.Entry(C)
    G.pack(pady=10)
    G.insert(0, ".exe,.dll,.docx")

    M = t.Button(C,
                 text="Browse Folder and Scan",
                 command=Q,
                 state=t.DISABLED)
    M.pack(pady=10)

    H = k.Progressbar(C,
                     orient="horizontal",
                     length=300,
                     mode="determinate")
    H.pack(pady=10)

    J = t.Label(C, text="Scan summary: Not started")
    J.pack(pady=10)

    I = s.ScrolledText(C,
                       wrap=t.WORD,
                       width=80,
                       height=20)
    I.pack(pady=10, padx=10)

    C.mainloop()

if __name__ == "__main__":
    l()

# References
# Paul A. Gagniuc. Antivirus Engines: From Methods to Innovations, Design, and Applications. Cambridge, MA: Elsevier Syngress, 2024. pp. 1-656.